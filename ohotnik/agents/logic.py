#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname # noqa
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class RoverLogicBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
        )
        config = config.replace(**settings)
        super().__init__(text, config=config)


class RoverLogicParser(Parser):
    def __init__(self, /, config: ParserConfig = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            comments_re=None,
            eol_comments_re=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            keywords=KEYWORDS,
        )
        config = config.replace(**settings)
        super().__init__(config=config)

    @tatsumasu()
    def _variable_(self):  # noqa
        self._pattern('[A-Z]')

    @tatsumasu()
    def _constant_(self):  # noqa
        self._pattern('[\\w_-]+')

    @tatsumasu()
    def _predName_(self):  # noqa
        self._pattern('[+-]?[\\w_-]+')

    @tatsumasu()
    def _funcName_(self):  # noqa
        self._pattern('[+-]?[\\w_-]+')

    @tatsumasu()
    def _start_(self):  # noqa
        self._sentence_()
        self._check_eof()

    @tatsumasu()
    def _sentence_(self):  # noqa
        with self._choice():
            with self._option():
                self._atomicSentence_()
            with self._option():
                self._complexSentence_()
            self._error(
                'expecting one of: '
                "'!' '(' 'False' 'True' <atomicSentence>"
                '<complexSentence> <predicate>'
            )

    @tatsumasu()
    def _atomicSentence_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('True')
            with self._option():
                self._token('False')
            with self._option():
                self._predicate_()
            self._error(
                'expecting one of: '
                "'False' 'True' <predName> <predicate>"
                '[+-]?[\\w_-]+'
            )

    @tatsumasu()
    def _complexSentence_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('!')
                self.add_last_node_to_name('@')
                self._sentence_()
                self.add_last_node_to_name('@')
            with self._option():
                self._token('(')

                def sep4():
                    self._token('&')

                def block4():
                    self._sentence_()
                self._left_join(block4, sep4)
                self.name_last_node('@')
                self._token(')')
            with self._option():
                self._constant('->')
                self.add_last_node_to_name('@')
                self._token('(')
                self._sentence_()
                self.add_last_node_to_name('@')
                self._token('->')
                self._sentence_()
                self.add_last_node_to_name('@')
                self._token(')')
            with self._option():
                self._constant(':')
                self.add_last_node_to_name('@')
                self._token('(')
                self._sentence_()
                self.add_last_node_to_name('@')
                self._token(':')
                self._sentence_()
                self.add_last_node_to_name('@')
                self._token(')')
            with self._option():
                self._constant('=')
                self.add_last_node_to_name('@')
                self._token('(')
                self._sentence_()
                self.add_last_node_to_name('@')
                self._token('=')
                self._sentence_()
                self.add_last_node_to_name('@')
                self._token(')')
            self._error(
                'expecting one of: '
                "'!' '('"
            )

    @tatsumasu()
    def _predicate_(self):  # noqa
        with self._group():
            self._predName_()
        self.name_last_node('@')
        self._token('(')

        def sep2():
            self._token(',')

        def block2():
            self._term_()
        self._positive_gather(block2, sep2)
        self.add_last_node_to_name('@')
        self._token(')')

    @tatsumasu()
    def _term_(self):  # noqa
        with self._choice():
            with self._option():
                self._function_()
            with self._option():
                self._variable_()
            with self._option():
                self._constant_()
            self._error(
                'expecting one of: '
                '<constant> <funcName> <function>'
                '<variable> [+-]?[\\w_-]+ [A-Z] [\\w_-]+'
            )

    @tatsumasu()
    def _function_(self):  # noqa
        self._funcName_()
        self.name_last_node('@')
        self._token('(')

        def sep2():
            self._token(',')

        def block2():
            self._term_()
        self._positive_gather(block2, sep2)
        self.add_last_node_to_name('@')
        self._token(')')


class RoverLogicSemantics:
    def variable(self, ast):  # noqa
        return ast

    def constant(self, ast):  # noqa
        return ast

    def predName(self, ast):  # noqa
        return ast

    def funcName(self, ast):  # noqa
        return ast

    def start(self, ast):  # noqa
        return ast

    def sentence(self, ast):  # noqa
        return ast

    def atomicSentence(self, ast):  # noqa
        return ast

    def complexSentence(self, ast):  # noqa
        return ast

    def predicate(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def function(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'variable'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = RoverLogicParser()
    return parser.parse(
        text,
        rule_name=start,
        filename=filename,
        **kwargs
    )


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, RoverLogicParser, name='RoverLogic')
    data = asjson(ast)
    print(json.dumps(data, indent=2))

